"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AppleMusicExtractor: () => AppleMusicExtractor,
  AttachmentExtractor: () => AttachmentExtractor,
  Internal: () => internal_exports,
  ReverbnationExtractor: () => ReverbnationExtractor,
  SoundCloudExtractor: () => SoundCloudExtractor,
  SpotifyExtractor: () => SpotifyExtractor,
  UA: () => UA,
  VimeoExtractor: () => VimeoExtractor,
  YouTubeExtractor: () => YoutubeExtractor,
  YouTubeLibs: () => YouTubeLibs,
  YoutubeExtractor: () => YoutubeExtractor,
  createImport: () => createImport,
  getFetch: () => getFetch,
  loadYtdl: () => loadYtdl,
  lyricsExtractor: () => lyricsExtractor,
  makeYTSearch: () => makeYTSearch,
  pullYTMetadata: () => pullYTMetadata,
  version: () => version
});
module.exports = __toCommonJS(src_exports);

// src/extractors/SoundCloudExtractor.ts
var import_discord_player = require("discord-player");
var SoundCloud = __toESM(require("soundcloud.ts"));
var SoundCloudExtractor = class extends import_discord_player.BaseExtractor {
  constructor() {
    super(...arguments);
    this.internal = new SoundCloud.default({
      clientId: this.options.clientId,
      oauthToken: this.options.oauthToken,
      proxy: this.options.proxy
    });
  }
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [
      import_discord_player.QueryType.SOUNDCLOUD,
      import_discord_player.QueryType.SOUNDCLOUD_PLAYLIST,
      import_discord_player.QueryType.SOUNDCLOUD_SEARCH,
      import_discord_player.QueryType.SOUNDCLOUD_TRACK,
      import_discord_player.QueryType.AUTO,
      import_discord_player.QueryType.AUTO_SEARCH
    ].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    if (track.queryType === import_discord_player.QueryType.SOUNDCLOUD_TRACK)
      return this.handle(track.author || track.title, {
        requestedBy: track.requestedBy,
        type: import_discord_player.QueryType.SOUNDCLOUD_SEARCH
      });
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player.QueryType.SOUNDCLOUD_TRACK: {
        const trackInfo = await this.internal.tracks.getV2(query).catch(import_discord_player.Util.noop);
        if (!trackInfo)
          return this.emptyResponse();
        const track = new import_discord_player.Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.permalink_url,
          duration: import_discord_player.Util.buildTimeCode(import_discord_player.Util.parseMS(trackInfo.duration)),
          description: trackInfo.description ?? "",
          thumbnail: trackInfo.artwork_url,
          views: trackInfo.playback_count,
          author: trackInfo.user.username,
          requestedBy: context.requestedBy,
          source: "soundcloud",
          engine: trackInfo,
          queryType: context.type,
          metadata: trackInfo,
          requestMetadata: async () => {
            return trackInfo;
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      case import_discord_player.QueryType.SOUNDCLOUD_PLAYLIST: {
        const data = await this.internal.playlists.getV2(query).catch(import_discord_player.Util.noop);
        if (!data)
          return { playlist: null, tracks: [] };
        const res = new import_discord_player.Playlist(this.context.player, {
          title: data.title,
          description: data.description ?? "",
          thumbnail: data.artwork_url ?? data.tracks[0].artwork_url,
          type: "playlist",
          source: "soundcloud",
          author: {
            name: data.user.username,
            url: data.user.permalink_url
          },
          tracks: [],
          id: `${data.id}`,
          url: data.permalink_url,
          rawPlaylist: data
        });
        for (const song of data.tracks) {
          const track = new import_discord_player.Track(this.context.player, {
            title: song.title,
            description: song.description ?? "",
            author: song.user.username,
            url: song.permalink_url,
            thumbnail: song.artwork_url,
            duration: import_discord_player.Util.buildTimeCode(import_discord_player.Util.parseMS(song.duration)),
            views: song.playback_count,
            requestedBy: context.requestedBy,
            playlist: res,
            source: "soundcloud",
            engine: song,
            queryType: context.type,
            metadata: song,
            requestMetadata: async () => {
              return song;
            }
          });
          track.extractor = this;
          track.playlist = res;
          res.tracks.push(track);
        }
        return { playlist: res, tracks: res.tracks };
      }
      default: {
        const tracks = await this.internal.tracks.searchV2({ q: query }).catch(import_discord_player.Util.noop);
        if (!tracks || !tracks.collection.length)
          return this.emptyResponse();
        const resolvedTracks = [];
        for (const trackInfo of tracks.collection) {
          const track = new import_discord_player.Track(this.context.player, {
            title: trackInfo.title,
            url: trackInfo.permalink_url,
            duration: import_discord_player.Util.buildTimeCode(import_discord_player.Util.parseMS(trackInfo.duration)),
            description: trackInfo.description ?? "",
            thumbnail: trackInfo.artwork_url,
            views: trackInfo.playback_count,
            author: trackInfo.user.username,
            requestedBy: context.requestedBy,
            source: "soundcloud",
            engine: trackInfo,
            queryType: "soundcloudTrack",
            metadata: trackInfo,
            requestMetadata: async () => {
              return trackInfo;
            }
          });
          track.extractor = this;
          resolvedTracks.push(track);
        }
        return { playlist: null, tracks: resolvedTracks };
      }
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const url = await this.internal.util.streamLink(info.url).catch(import_discord_player.Util.noop);
    if (!url)
      throw new Error("Could not extract stream from this track source");
    return url;
  }
};
__name(SoundCloudExtractor, "SoundCloudExtractor");
SoundCloudExtractor.identifier = "com.discord-player.soundcloudextractor";

// src/extractors/YoutubeExtractor.ts
var import_youtube_sr2 = require("youtube-sr");
var import_discord_player2 = require("discord-player");

// src/extractors/common/helper.ts
var import_youtube_sr = require("youtube-sr");
var factory;
var createImport = /* @__PURE__ */ __name((lib) => import(lib).catch(() => null), "createImport");
var UA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.49";
var YouTubeLibs = [
  "ytdl-core",
  "@distube/ytdl-core",
  "play-dl",
  "yt-stream"
];
var ERR_NO_YT_LIB = new Error(`Could not load youtube library. Install one of ${YouTubeLibs.map((lib) => `"${lib}"`).join(", ")}`);
var forcedLib = process.env.DP_FORCE_YTDL_MOD;
if (forcedLib)
  YouTubeLibs.unshift(forcedLib);
var getFetch = typeof fetch !== "undefined" ? fetch : async (info, init) => {
  let dy;
  if (dy = await createImport("undici")) {
    return (dy.fetch || dy.default.fetch)(info, init);
  } else if (dy = await createImport("node-fetch")) {
    return (dy.fetch || dy.default)(info, init);
  } else {
    throw new Error("No fetch lib found");
  }
};
async function loadYtdl(options, force = false) {
  if (factory && !force)
    return factory;
  let lib, _ytLibName, _stream;
  for (const ytlib of YouTubeLibs) {
    lib = await import(ytlib).then(
      (m) => m,
      () => null
    );
    if (!lib)
      continue;
    lib = lib.default || lib;
    _ytLibName = ytlib;
    break;
  }
  if (lib) {
    const isYtdl = ["ytdl-core", "@distube/ytdl-core"].some((lib2) => lib2 === _ytLibName);
    _stream = /* @__PURE__ */ __name(async (query) => {
      if (isYtdl) {
        const dl = lib;
        const info = await dl.getInfo(query, options);
        const formats = info.formats.filter((format) => {
          return info.videoDetails.isLiveContent ? format.isHLS && format.hasAudio : format.hasAudio;
        }).sort((a, b) => Number(b.audioBitrate) - Number(a.audioBitrate) || Number(a.bitrate) - Number(b.bitrate));
        const fmt = formats.find((format) => !format.hasVideo) || formats.sort((a, b) => Number(a.bitrate) - Number(b.bitrate))[0];
        const url = fmt?.url;
        if (!url)
          throw new Error(`Failed to parse stream url for ${query}`);
        return url;
      } else if (_ytLibName === "play-dl") {
        const dl = lib;
        const info = await dl.video_info(query);
        const formats = info.format.filter((format) => {
          const re2 = /\/manifest\/hls_(variant|playlist)\//;
          if (!format.url)
            return false;
          if (info.video_details.live)
            return re2.test(format.url) && typeof format.bitrate === "number";
          return typeof format.bitrate === "number";
        }).sort((a, b) => Number(b.bitrate) - Number(a.bitrate));
        const fmt = formats.find((format) => !format.qualityLabel) || formats.sort((a, b) => Number(a.bitrate) - Number(b.bitrate))[0];
        const url = fmt?.url;
        if (!url)
          throw new Error(`Failed to parse stream url for ${query}`);
        return url;
      } else if (_ytLibName === "yt-stream") {
        const dl = lib;
        const decipher = await import("yt-stream/src/stream/decipher.js");
        const info = await dl.getInfo(query);
        info.formats = await decipher?.format_decipher(info.formats, info.html5player);
        const url = info.formats.filter((val) => val.mimeType.startsWith("audio") && val.audioQuality !== "AUDIO_QUALITY_LOW").map((val) => val.url);
        if (url.length !== 0)
          return url[0];
        return info.formats.filter((val) => val.mimeType.startsWith("audio")).map((val) => val.url)[0];
      } else {
        throw ERR_NO_YT_LIB;
      }
    }, "_stream");
  } else {
    throw ERR_NO_YT_LIB;
  }
  factory = { name: _ytLibName, stream: _stream, lib };
  return factory;
}
__name(loadYtdl, "loadYtdl");
async function makeYTSearch(query, opt) {
  const res = await import_youtube_sr.YouTube.search(query, {
    type: "video",
    requestOptions: opt
  }).catch(() => {
  });
  return res || [];
}
__name(makeYTSearch, "makeYTSearch");
async function pullYTMetadata(ext, info) {
  const meta = await makeYTSearch(ext.createBridgeQuery(info), "video").then((r) => r[0]).catch(() => null);
  return meta;
}
__name(pullYTMetadata, "pullYTMetadata");

// src/extractors/YoutubeExtractor.ts
var validQueryDomains = /* @__PURE__ */ new Set(["youtube.com", "www.youtube.com", "m.youtube.com", "music.youtube.com", "gaming.youtube.com"]);
var validPathDomains = /^https?:\/\/(youtu\.be\/|(www\.)?youtube\.com\/(embed|v|shorts)\/)/;
var idRegex = /^[a-zA-Z0-9-_]{11}$/;
var _YoutubeExtractor = class extends import_discord_player2.BaseExtractor {
  async activate() {
    const fn = this.options.createStream;
    if (typeof fn === "function") {
      this._stream = (q) => {
        return fn(this, q);
      };
      return;
    }
    const { stream, name } = await loadYtdl(this.context.player.options.ytdlOptions);
    this._stream = stream;
    this._ytLibName = name;
  }
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [
      import_discord_player2.QueryType.YOUTUBE,
      import_discord_player2.QueryType.YOUTUBE_PLAYLIST,
      import_discord_player2.QueryType.YOUTUBE_SEARCH,
      import_discord_player2.QueryType.YOUTUBE_VIDEO,
      import_discord_player2.QueryType.AUTO,
      import_discord_player2.QueryType.AUTO_SEARCH
    ].some((r) => r === type);
  }
  async handle(query, context) {
    query = query.includes("youtube.com") ? query.replace(/(m(usic)?|gaming)\./, "") : query;
    if (_YoutubeExtractor.validateURL(query))
      context.type = import_discord_player2.QueryType.YOUTUBE_VIDEO;
    switch (context.type) {
      case import_discord_player2.QueryType.YOUTUBE_PLAYLIST: {
        const ytpl = await import_youtube_sr2.YouTube.getPlaylist(query, {
          fetchAll: true,
          requestOptions: context.requestOptions
        }).catch(import_discord_player2.Util.noop);
        if (!ytpl)
          return this.emptyResponse();
        const playlist = new import_discord_player2.Playlist(this.context.player, {
          title: ytpl.title,
          thumbnail: ytpl.thumbnail?.displayThumbnailURL("maxresdefault"),
          description: ytpl.title || "",
          type: "playlist",
          source: "youtube",
          author: {
            name: ytpl.channel.name,
            url: ytpl.channel.url
          },
          tracks: [],
          id: ytpl.id,
          url: ytpl.url,
          rawPlaylist: ytpl
        });
        playlist.tracks = ytpl.videos.map((video) => {
          const track = new import_discord_player2.Track(this.context.player, {
            title: video.title,
            description: video.description,
            author: video.channel?.name,
            url: video.url,
            requestedBy: context.requestedBy,
            thumbnail: video.thumbnail.url,
            views: video.views,
            duration: video.durationFormatted,
            raw: video,
            playlist,
            source: "youtube",
            queryType: "youtubeVideo",
            metadata: video,
            async requestMetadata() {
              return video;
            }
          });
          track.extractor = this;
          track.playlist = playlist;
          return track;
        });
        return { playlist, tracks: playlist.tracks };
      }
      case import_discord_player2.QueryType.YOUTUBE_VIDEO: {
        const id = /[a-zA-Z0-9-_]{11}/.exec(query);
        if (!id?.[0])
          return this.emptyResponse();
        const video = await import_youtube_sr2.YouTube.getVideo(`https://www.youtube.com/watch?v=${id}`, context.requestOptions).catch(import_discord_player2.Util.noop);
        if (!video)
          return this.emptyResponse();
        video.source = "youtube";
        const track = new import_discord_player2.Track(this.context.player, {
          title: video.title,
          description: video.description,
          author: video.channel?.name,
          url: video.url,
          requestedBy: context.requestedBy,
          thumbnail: video.thumbnail?.displayThumbnailURL("maxresdefault"),
          views: video.views,
          duration: video.durationFormatted,
          source: "youtube",
          raw: video,
          queryType: context.type,
          metadata: video,
          async requestMetadata() {
            return video;
          }
        });
        track.extractor = this;
        return {
          playlist: null,
          tracks: [track]
        };
      }
      default: {
        const tracks = await this._makeYTSearch(query, context);
        return { playlist: null, tracks };
      }
    }
  }
  async _makeYTSearch(query, context) {
    const res = await makeYTSearch(query, context.requestOptions).catch(import_discord_player2.Util.noop);
    if (!res || !res.length)
      return [];
    return res.map((video) => {
      video.source = "youtube";
      const track = new import_discord_player2.Track(this.context.player, {
        title: video.title,
        description: video.description,
        author: video.channel?.name,
        url: video.url,
        requestedBy: context.requestedBy,
        thumbnail: video.thumbnail?.displayThumbnailURL("maxresdefault"),
        views: video.views,
        duration: video.durationFormatted,
        source: "youtube",
        raw: video,
        queryType: context.type,
        metadata: video,
        async requestMetadata() {
          return video;
        }
      });
      track.extractor = this;
      return track;
    });
  }
  async getRelatedTracks(track) {
    let info;
    if (_YoutubeExtractor.validateURL(track.url))
      info = await import_youtube_sr2.YouTube.getVideo(track.url).then((x) => x.videos).catch(import_discord_player2.Util.noop);
    if (!info)
      info = await import_youtube_sr2.YouTube.search(track.author || track.title, { limit: 5, type: "video" }).then((x) => x).catch(import_discord_player2.Util.noop);
    if (!info?.length) {
      return this.createResponse();
    }
    const similar = info.map((video) => {
      const t = new import_discord_player2.Track(this.context.player, {
        title: video.title,
        url: `https://www.youtube.com/watch?v=${video.id}`,
        duration: video.durationFormatted || import_discord_player2.Util.buildTimeCode(import_discord_player2.Util.parseMS(video.duration * 1e3)),
        description: video.title,
        thumbnail: typeof video.thumbnail === "string" ? video.thumbnail : video.thumbnail.url,
        views: video.views,
        author: video.channel.name,
        requestedBy: track.requestedBy,
        source: "youtube",
        queryType: "youtubeVideo",
        metadata: video,
        async requestMetadata() {
          return video;
        }
      });
      t.extractor = this;
      return t;
    });
    return this.createResponse(null, similar);
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    if (!this._stream) {
      throw new Error(`Could not find youtube streaming library. Install one of ${YouTubeLibs.join(", ")}`);
    }
    let url = info.url;
    url = url.includes("youtube.com") ? url.replace(/(m(usic)?|gaming)\./, "") : url;
    return this._stream(url);
  }
  static validateURL(link) {
    try {
      _YoutubeExtractor.parseURL(link);
      return true;
    } catch {
      return false;
    }
  }
  static validateId(id) {
    return idRegex.test(id.trim());
  }
  static parseURL(link) {
    const parsed = new URL(link.trim());
    let id = parsed.searchParams.get("v");
    if (validPathDomains.test(link.trim()) && !id) {
      const paths = parsed.pathname.split("/");
      id = parsed.host === "youtu.be" ? paths[1] : paths[2];
    } else if (parsed.hostname && !validQueryDomains.has(parsed.hostname)) {
      throw Error("Not a YouTube domain");
    }
    if (!id) {
      throw Error(`No video id found: "${link}"`);
    }
    id = id.substring(0, 11);
    if (!this.validateId(id)) {
      throw TypeError(`Video id (${id}) does not match expected format (${idRegex.toString()})`);
    }
    return id;
  }
};
var YoutubeExtractor = _YoutubeExtractor;
__name(YoutubeExtractor, "YoutubeExtractor");
YoutubeExtractor.identifier = "com.discord-player.youtubeextractor";

// src/extractors/LyricsExtractor.ts
var import_genius_lyrics = require("genius-lyrics");
var client;
function lyricsExtractor(apiKey, force) {
  if (!client && !force)
    client = new import_genius_lyrics.Client(apiKey);
  return { search, client };
}
__name(lyricsExtractor, "lyricsExtractor");
function search(query) {
  return new Promise((resolve, reject) => {
    if (typeof query !== "string")
      return reject(new TypeError(`Expected search query to be a string, received "${typeof query}"!`));
    client.songs.search(query).then(async (songs) => {
      const data = {
        title: songs[0].title,
        fullTitle: songs[0].fullTitle,
        id: songs[0].id,
        thumbnail: songs[0].thumbnail,
        image: songs[0].image,
        url: songs[0].url,
        artist: {
          name: songs[0].artist.name,
          id: songs[0].artist.id,
          url: songs[0].artist.url,
          image: songs[0].artist.image
        },
        lyrics: await songs[0].lyrics(false)
      };
      resolve(data);
    }).catch(() => {
      reject(new Error("Could not parse lyrics"));
    });
  });
}
__name(search, "search");

// src/extractors/VimeoExtractor.ts
var import_discord_player3 = require("discord-player");

// src/internal/Vimeo.ts
var import_http = __toESM(require("http"));
var import_https = __toESM(require("https"));
var Vimeo = class {
  constructor() {
    throw new Error(`The ${this.constructor.name} class may not be instantiated!`);
  }
  static download(id) {
    return new Promise(async (resolve) => {
      const info = await Vimeo.getInfo(id);
      if (!info)
        return null;
      const downloader = info.stream.startsWith("https://") ? import_https.default : import_http.default;
      downloader.get(info.stream, (res) => {
        resolve(res);
      });
    });
  }
  static async getInfo(id) {
    if (!id)
      throw new Error("Invalid id");
    const url = `https://player.vimeo.com/video/${id}`;
    try {
      const res = await getFetch(url);
      const data = await res.text();
      const json = JSON.parse(data.split("window.playerConfig =")[1].split(";")[0].trim());
      const obj = {
        id: json.video.id,
        duration: json.video.duration * 1e3,
        title: json.video.title,
        url: json.video.url,
        thumbnail: json.video.thumbs["1280"] || json.video.thumbs.base,
        stream: json.request.files.progressive[0].url,
        author: {
          id: json.video.owner.id,
          name: json.video.owner.name,
          url: json.video.owner.url,
          avatar: json.video.owner.img_2x || json.video.owner.img
        }
      };
      return obj;
    } catch {
      return null;
    }
  }
};
__name(Vimeo, "Vimeo");

// src/extractors/VimeoExtractor.ts
var VimeoExtractor = class extends import_discord_player3.BaseExtractor {
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [import_discord_player3.QueryType.VIMEO].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player3.QueryType.VIMEO: {
        const trackInfo = await Vimeo.getInfo(
          query.split("/").filter((x) => !!x).pop()
        ).catch(import_discord_player3.Util.noop);
        if (!trackInfo)
          return this.emptyResponse();
        const track = new import_discord_player3.Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: import_discord_player3.Util.buildTimeCode(import_discord_player3.Util.parseMS(trackInfo.duration || 0)),
          description: `${trackInfo.title} by ${trackInfo.author.name}`,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author.name,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.stream,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    if (engine) {
      return engine;
    }
    const track = await Vimeo.getInfo(info.url).catch(import_discord_player3.Util.noop);
    if (!track || !track.stream)
      throw new Error("Could not extract stream from this source");
    info.raw.engine = {
      streamURL: track.stream
    };
    return track.stream;
  }
};
__name(VimeoExtractor, "VimeoExtractor");
VimeoExtractor.identifier = "com.discord-player.vimeoextractor";

// src/extractors/ReverbnationExtractor.ts
var import_discord_player4 = require("discord-player");
var import_reverbnation_scraper = __toESM(require("reverbnation-scraper"));
var ReverbnationExtractor = class extends import_discord_player4.BaseExtractor {
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [import_discord_player4.QueryType.REVERBNATION].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player4.QueryType.REVERBNATION: {
        const trackInfo = await import_reverbnation_scraper.default.getInfo(query).catch(import_discord_player4.Util.noop);
        if (!trackInfo)
          return this.emptyResponse();
        const track = new import_discord_player4.Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: import_discord_player4.Util.buildTimeCode(import_discord_player4.Util.parseMS(trackInfo.duration)),
          description: trackInfo.lyrics || `${trackInfo.title} by ${trackInfo.artist.name}`,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.artist.name,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.streamURL,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    if (engine) {
      return engine;
    }
    const track = await import_reverbnation_scraper.default.getInfo(info.url).catch(import_discord_player4.Util.noop);
    if (!track || !track.streamURL)
      throw new Error("Could not extract stream from this source");
    info.raw.engine = {
      streamURL: track.streamURL
    };
    return track.streamURL;
  }
};
__name(ReverbnationExtractor, "ReverbnationExtractor");
ReverbnationExtractor.identifier = "com.discord-player.reverbnationextractor";

// src/extractors/AttachmentExtractor.ts
var import_discord_player5 = require("discord-player");
var import_fs = require("fs");

// src/internal/downloader.ts
var import_http2 = __toESM(require("http"));
var import_https2 = __toESM(require("https"));
function downloadStream(url, opts = {}) {
  return new Promise((resolve, reject) => {
    const lib = url.startsWith("http://") ? import_http2.default : import_https2.default;
    lib.get(url, opts, (res) => resolve(res)).once("error", reject);
  });
}
__name(downloadStream, "downloadStream");

// src/extractors/AttachmentExtractor.ts
var fileType = __toESM(require("file-type"));
var import_path = __toESM(require("path"));
var import_promises = require("fs/promises");
var AttachmentExtractor = class extends import_discord_player5.BaseExtractor {
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [import_discord_player5.QueryType.ARBITRARY, import_discord_player5.QueryType.FILE].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player5.QueryType.ARBITRARY: {
        const data = await downloadStream(query, context.requestOptions);
        if (!["audio/", "video/"].some((r) => !!data.headers["content-type"]?.startsWith(r)))
          return this.emptyResponse();
        const trackInfo = {
          title: (query.split("/").filter((x) => x.length).pop() ?? "Attachment").split("?")[0].trim(),
          duration: 0,
          thumbnail: "https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png",
          engine: query,
          author: data.client?.servername || "Attachment",
          description: data.client?.servername || "Attachment",
          url: data.url || query
        };
        const track = new import_discord_player5.Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: import_discord_player5.Util.buildTimeCode(import_discord_player5.Util.parseMS(trackInfo.duration)),
          description: trackInfo.description,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.url,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        track.raw.isFile = false;
        return { playlist: null, tracks: [track] };
      }
      case import_discord_player5.QueryType.FILE: {
        if (!(0, import_fs.existsSync)(query))
          return this.emptyResponse();
        const fstat = await (0, import_promises.stat)(query);
        if (!fstat.isFile())
          return this.emptyResponse();
        const mime = await fileType.fromFile(query).catch(() => null);
        if (!mime || !["audio/", "video/"].some((r) => !!mime.mime.startsWith(r)))
          return this.emptyResponse();
        const trackInfo = {
          title: import_path.default.basename(query) || "Attachment",
          duration: 0,
          thumbnail: "https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png",
          engine: query,
          author: "Attachment",
          description: "Attachment",
          url: query
        };
        const track = new import_discord_player5.Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: import_discord_player5.Util.buildTimeCode(import_discord_player5.Util.parseMS(trackInfo.duration)),
          description: trackInfo.description,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.url,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        track.raw.isFile = true;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    const isFile = info.raw.isFile;
    if (!engine)
      throw new Error("Could not find stream source");
    if (!isFile) {
      return engine;
    }
    return (0, import_fs.createReadStream)(engine);
  }
};
__name(AttachmentExtractor, "AttachmentExtractor");
AttachmentExtractor.identifier = "com.discord-player.attachmentextractor";

// src/extractors/AppleMusicExtractor.ts
var import_discord_player7 = require("discord-player");

// src/internal/index.ts
var internal_exports = {};
__export(internal_exports, {
  AppleMusic: () => AppleMusic,
  SpotifyAPI: () => SpotifyAPI,
  Vimeo: () => Vimeo,
  downloadStream: () => downloadStream
});

// src/internal/AppleMusic.ts
var import_discord_player6 = require("discord-player");
var import_node_html_parser = require("node-html-parser");
function getHTML(link) {
  return getFetch(link, {
    headers: {
      "User-Agent": UA
    }
  }).then((r) => r.text()).then(
    (txt) => (0, import_node_html_parser.parse)(txt),
    () => null
  );
}
__name(getHTML, "getHTML");
function makeImage({ height, url, width, ext = "jpg" }) {
  return url.replace("{w}", `${width}`).replace("{h}", `${height}`).replace("{f}", ext);
}
__name(makeImage, "makeImage");
function parseDuration(d) {
  const r = /* @__PURE__ */ __name((name, unit) => `((?<${name}>-?\\d*[\\.,]?\\d+)${unit})?`, "r");
  const regex = new RegExp(
    [
      "(?<negative>-)?P",
      r("years", "Y"),
      r("months", "M"),
      r("weeks", "W"),
      r("days", "D"),
      "(T",
      r("hours", "H"),
      r("minutes", "M"),
      r("seconds", "S"),
      ")?"
    ].join("")
  );
  const test = regex.exec(d);
  if (!test || !test.groups)
    return "0:00";
  const dur = [test.groups.years, test.groups.months, test.groups.weeks, test.groups.days, test.groups.hours, test.groups.minutes, test.groups.seconds];
  return dur.filter((r2, i, a) => !!r2 || i > a.length - 2).map((m, i) => {
    if (!m)
      m = "0";
    return i < 1 ? m : m.padStart(2, "0");
  }).join(":") || "0:00";
}
__name(parseDuration, "parseDuration");
var AppleMusic = class {
  constructor() {
    return AppleMusic;
  }
  static async search(query) {
    try {
      const url = `https://music.apple.com/us/search?term=${encodeURIComponent(query)}`;
      const node = await getHTML(url);
      if (!node)
        return [];
      const rawData = node.getElementById("serialized-server-data");
      if (!rawData)
        return [];
      const data = JSON.parse(rawData.innerText)[0].data.sections;
      const tracks = data.find((s) => s.itemKind === "trackLockup")?.items;
      if (!tracks)
        return [];
      return tracks.map((track) => ({
        id: track.contentDescriptor.identifiers.storeAdamID,
        duration: track.duration || "0:00",
        title: track.title,
        url: track.contentDescriptor.url,
        thumbnail: track?.artwork?.dictionary ? makeImage({
          url: track.artwork.dictionary.url,
          height: track.artwork.dictionary.height,
          width: track.artwork.dictionary.width
        }) : "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: track.subtitleLinks?.[0]?.title ?? "Unknown Artist"
        }
      }));
    } catch {
      return [];
    }
  }
  static async getSongInfoFallback(res, name, id, link) {
    try {
      const metaTags = res.getElementsByTagName("meta");
      if (!metaTags.length)
        return null;
      const title = metaTags.find((r) => r.getAttribute("name") === "apple:title")?.getAttribute("content") || res.querySelector("title")?.innerText || name;
      const contentId = metaTags.find((r) => r.getAttribute("name") === "apple:content_id")?.getAttribute("content") || id;
      const durationRaw = metaTags.find((r) => r.getAttribute("property") === "music:song:duration")?.getAttribute("content");
      const song = {
        id: contentId,
        duration: durationRaw ? parseDuration(durationRaw) : metaTags.find((m) => m.getAttribute("name") === "apple:description")?.textContent.split("Duration: ")?.[1].split('"')?.[0] || "0:00",
        title,
        url: link,
        thumbnail: metaTags.find((r) => ["og:image:secure_url", "og:image"].includes(r.getAttribute("property")))?.getAttribute("content") || "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: res.querySelector(".song-subtitles__artists>a")?.textContent?.trim() || "Apple Music"
        }
      };
      return song;
    } catch {
      return null;
    }
  }
  static async getSongInfo(link) {
    if (!import_discord_player6.QueryResolver.regex.appleMusicSongRegex.test(link)) {
      return null;
    }
    const url = new URL(link);
    const id = url.searchParams.get("i");
    const name = url.pathname.split("album/")[1]?.split("/")[0];
    if (!id || !name)
      return null;
    const res = await getHTML(`https://music.apple.com/us/song/${name}/${id}`);
    if (!res)
      return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split('<script type="application/json" id="serialized-server-data">')?.[1]?.split("<\/script>")?.[0];
      if (!datasrc)
        throw "not found";
      const data = JSON.parse(datasrc)[0].data.seoData;
      const song = data.ogSongs[0]?.attributes;
      return {
        id: data.ogSongs[0]?.id || data.appleContentId || id,
        duration: song?.durationInMillis || "0:00",
        title: song?.name || data.appleTitle,
        url: song?.url || data.url || link,
        thumbnail: song?.artwork ? makeImage({
          url: song.artwork.url,
          height: song.artwork.height,
          width: song.artwork.width
        }) : data.artworkUrl ? makeImage({
          height: data.height,
          width: data.width,
          url: data.artworkUrl,
          ext: data.fileType || "jpg"
        }) : "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: song?.artistName || data.socialTitle || "Apple Music"
        }
      };
    } catch {
      return this.getSongInfoFallback(res, name, id, link);
    }
  }
  static async getPlaylistInfo(link) {
    if (!import_discord_player6.QueryResolver.regex.appleMusicPlaylistRegex.test(link)) {
      return null;
    }
    const res = await getHTML(link);
    if (!res)
      return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split('<script type="application/json" id="serialized-server-data">')?.[1]?.split("<\/script>")?.[0];
      if (!datasrc)
        throw "not found";
      const pl = JSON.parse(datasrc)[0].data.seoData;
      const thumbnail = pl.artworkUrl ? makeImage({
        height: pl.height,
        width: pl.width,
        url: pl.artworkUrl,
        ext: pl.fileType || "jpg"
      }) : "https://music.apple.com/assets/favicon/favicon-180.png";
      return {
        id: pl.appleContentId,
        title: pl.appleTitle,
        thumbnail,
        artist: {
          name: pl.ogSongs?.[0]?.attributes?.artistName || "Apple Music"
        },
        url: pl.url,
        tracks: pl.ogSongs?.map((m) => {
          const song = m.attributes;
          return {
            id: m.id,
            duration: song.durationInMillis || "0:00",
            title: song.name,
            url: song.url,
            thumbnail: song.artwork ? makeImage({
              url: song.artwork.url,
              height: song.artwork.height,
              width: song.artwork.width
            }) : thumbnail,
            artist: {
              name: song.artistName || "Apple Music"
            }
          };
        }) || []
      };
    } catch {
      return null;
    }
  }
  static async getAlbumInfo(link) {
    if (!import_discord_player6.QueryResolver.regex.appleMusicAlbumRegex.test(link)) {
      return null;
    }
    const res = await getHTML(link);
    if (!res)
      return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split('<script type="application/json" id="serialized-server-data">')?.[1]?.split("<\/script>")?.[0];
      if (!datasrc)
        throw "not found";
      const pl = JSON.parse(datasrc)[0].data.seoData;
      const thumbnail = pl.artworkUrl ? makeImage({
        height: pl.height,
        width: pl.width,
        url: pl.artworkUrl,
        ext: pl.fileType || "jpg"
      }) : "https://music.apple.com/assets/favicon/favicon-180.png";
      return {
        id: pl.appleContentId,
        title: pl.appleTitle,
        thumbnail,
        artist: {
          name: pl.ogSongs?.[0]?.attributes?.artistName || "Apple Music"
        },
        url: pl.url,
        tracks: pl.ogSongs?.map((m) => {
          const song = m.attributes;
          return {
            id: m.id,
            duration: song.durationInMillis || "0:00",
            title: song.name,
            url: song.url,
            thumbnail: song.artwork ? makeImage({
              url: song.artwork.url,
              height: song.artwork.height,
              width: song.artwork.width
            }) : thumbnail,
            artist: {
              name: song.artistName || "Apple Music"
            }
          };
        }) || []
      };
    } catch {
      return null;
    }
  }
};
__name(AppleMusic, "AppleMusic");

// src/internal/Spotify.ts
var SP_ANON_TOKEN_URL = "https://open.spotify.com/get_access_token?reason=transport&productType=embed";
var SP_ACCESS_TOKEN_URL = "https://accounts.spotify.com/api/token?grant_type=client_credentials";
var SP_BASE = "https://api.spotify.com/v1";
var SpotifyAPI = class {
  constructor(credentials = {
    clientId: null,
    clientSecret: null
  }) {
    this.credentials = credentials;
    this.accessToken = null;
  }
  get authorizationKey() {
    if (!this.credentials.clientId || !this.credentials.clientSecret)
      return null;
    return Buffer.from(`${this.credentials.clientId}:${this.credentials.clientSecret}`).toString("base64");
  }
  async requestToken() {
    const key = this.authorizationKey;
    if (!key)
      return await this.requestAnonymousToken();
    try {
      const res = await getFetch(SP_ACCESS_TOKEN_URL, {
        method: "POST",
        headers: {
          "User-Agent": UA,
          Authorization: `Basic ${key}`,
          "Content-Type": "application/json"
        }
      });
      const body = await res.json();
      if (!body.access_token)
        throw "no token";
      const data = {
        token: body.access_token,
        expiresAfter: body.expires_in,
        type: "Bearer"
      };
      return this.accessToken = data;
    } catch {
      return await this.requestAnonymousToken();
    }
  }
  async requestAnonymousToken() {
    try {
      const res = await getFetch(SP_ANON_TOKEN_URL, {
        headers: {
          "User-Agent": UA,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        throw "not_ok";
      const body = await res.json();
      if (!body.accessToken)
        throw "no_access_token";
      const data = {
        token: body.accessToken,
        expiresAfter: body.accessTokenExpirationTimestampMs,
        type: "Bearer"
      };
      return this.accessToken = data;
    } catch {
      return null;
    }
  }
  isTokenExpired() {
    if (!this.accessToken)
      return true;
    return Date.now() > this.accessToken.expiresAfter;
  }
  async search(query) {
    try {
      if (this.isTokenExpired())
        await this.requestToken();
      if (!this.accessToken)
        return null;
      const res = await getFetch(`${SP_BASE}/search/?q=${encodeURIComponent(query)}&type=track&market=US`, {
        headers: {
          "User-Agent": UA,
          Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        return null;
      const data = await res.json();
      return data.tracks.items.map((m) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: m.album.images?.[0]?.url || null
      }));
    } catch {
      return null;
    }
  }
  async getPlaylist(id) {
    try {
      if (this.isTokenExpired())
        await this.requestToken();
      if (!this.accessToken)
        return null;
      const res = await getFetch(`${SP_BASE}/playlists/${id}?market=US`, {
        headers: {
          "User-Agent": UA,
          Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        return null;
      const data = await res.json();
      if (!data.tracks.items.length)
        return null;
      const t = data.tracks.items;
      let next = data.tracks.next;
      while (typeof next === "string") {
        try {
          const res2 = await getFetch(next, {
            headers: {
              "User-Agent": UA,
              Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
              "Content-Type": "application/json"
            }
          });
          if (!res2.ok)
            break;
          const nextPage = await res2.json();
          t.push(...nextPage.items);
          next = nextPage.next;
          if (!next)
            break;
        } catch {
          break;
        }
      }
      const tracks = t.map(({ track: m }) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: m.album.images?.[0]?.url || null
      }));
      if (!tracks.length)
        return null;
      return {
        name: data.name,
        author: data.owner.display_name,
        thumbnail: data.images?.[0]?.url || null,
        id: data.id,
        url: data.external_urls.spotify || `https://open.spotify.com/playlist/${id}`,
        tracks
      };
    } catch {
      return null;
    }
  }
  async getAlbum(id) {
    try {
      if (this.isTokenExpired())
        await this.requestToken();
      if (!this.accessToken)
        return null;
      const res = await getFetch(`${SP_BASE}/albums/${id}?market=US`, {
        headers: {
          "User-Agent": UA,
          Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        return null;
      const data = await res.json();
      if (!data.tracks.items.length)
        return null;
      const t = data.tracks.items;
      let next = data.tracks.next;
      while (typeof next === "string") {
        try {
          const res2 = await getFetch(next, {
            headers: {
              "User-Agent": UA,
              Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
              "Content-Type": "application/json"
            }
          });
          if (!res2.ok)
            break;
          const nextPage = await res2.json();
          t.push(...nextPage.items);
          next = nextPage.next;
          if (!next)
            break;
        } catch {
          break;
        }
      }
      const tracks = t.map((m) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: data.images?.[0]?.url || null
      }));
      if (!tracks.length)
        return null;
      return {
        name: data.name,
        author: data.artists.map((m) => m.name).join(", "),
        thumbnail: data.images?.[0]?.url || null,
        id: data.id,
        url: data.external_urls.spotify || `https://open.spotify.com/album/${id}`,
        tracks
      };
    } catch {
      return null;
    }
  }
};
__name(SpotifyAPI, "SpotifyAPI");

// src/extractors/AppleMusicExtractor.ts
var AppleMusicExtractor = class extends import_discord_player7.BaseExtractor {
  constructor() {
    super(...arguments);
    this._isYtdl = false;
  }
  async activate() {
    const fn = this.options.createStream;
    if (typeof fn === "function") {
      this._isYtdl = false;
      this._stream = (q) => {
        return fn(this, q);
      };
      return;
    }
    const lib = await loadYtdl(this.context.player.options.ytdlOptions);
    this._stream = lib.stream;
    this._isYtdl = true;
  }
  async validate(query, type) {
    return [
      import_discord_player7.QueryType.APPLE_MUSIC_ALBUM,
      import_discord_player7.QueryType.APPLE_MUSIC_PLAYLIST,
      import_discord_player7.QueryType.APPLE_MUSIC_SONG,
      import_discord_player7.QueryType.APPLE_MUSIC_SEARCH,
      import_discord_player7.QueryType.AUTO,
      import_discord_player7.QueryType.AUTO_SEARCH
    ].some((t) => t === type);
  }
  async getRelatedTracks(track) {
    if (track.queryType === import_discord_player7.QueryType.APPLE_MUSIC_SONG)
      return this.handle(track.author || track.title, {
        type: import_discord_player7.QueryType.APPLE_MUSIC_SEARCH,
        requestedBy: track.requestedBy
      });
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player7.QueryType.AUTO:
      case import_discord_player7.QueryType.AUTO_SEARCH:
      case import_discord_player7.QueryType.APPLE_MUSIC_SEARCH: {
        const data = await AppleMusic.search(query);
        if (!data || !data.length)
          return this.createResponse();
        const tracks = data.map(
          (m) => {
            const track = new import_discord_player7.Track(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? import_discord_player7.Util.buildTimeCode(import_discord_player7.Util.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: await pullYTMetadata(this, track)
                };
              }
            });
            track.extractor = this;
            return track;
          }
        );
        return this.createResponse(null, tracks);
      }
      case import_discord_player7.QueryType.APPLE_MUSIC_ALBUM: {
        const info = await AppleMusic.getAlbumInfo(query);
        if (!info)
          return this.createResponse();
        const playlist = new import_discord_player7.Playlist(this.context.player, {
          author: {
            name: info.artist.name,
            url: ""
          },
          description: info.title,
          id: info.id,
          source: "apple_music",
          thumbnail: info.thumbnail,
          title: info.title,
          tracks: [],
          type: "album",
          url: info.url,
          rawPlaylist: info
        });
        playlist.tracks = info.tracks.map(
          (m) => {
            const track = new import_discord_player7.Track(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? import_discord_player7.Util.buildTimeCode(import_discord_player7.Util.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: info,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: info,
                  bridge: await pullYTMetadata(this, track)
                };
              }
            });
            track.playlist = playlist;
            track.extractor = this;
            return track;
          }
        );
        return { playlist, tracks: playlist.tracks };
      }
      case import_discord_player7.QueryType.APPLE_MUSIC_PLAYLIST: {
        const info = await AppleMusic.getPlaylistInfo(query);
        if (!info)
          return this.createResponse();
        const playlist = new import_discord_player7.Playlist(this.context.player, {
          author: {
            name: info.artist.name,
            url: ""
          },
          description: info.title,
          id: info.id,
          source: "apple_music",
          thumbnail: info.thumbnail,
          title: info.title,
          tracks: [],
          type: "playlist",
          url: info.url,
          rawPlaylist: info
        });
        playlist.tracks = info.tracks.map(
          (m) => {
            const track = new import_discord_player7.Track(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? import_discord_player7.Util.buildTimeCode(import_discord_player7.Util.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: await pullYTMetadata(this, track)
                };
              }
            });
            track.playlist = playlist;
            track.extractor = this;
            return track;
          }
        );
        return { playlist, tracks: playlist.tracks };
      }
      case import_discord_player7.QueryType.APPLE_MUSIC_SONG: {
        const info = await AppleMusic.getSongInfo(query);
        if (!info)
          return this.createResponse();
        const track = new import_discord_player7.Track(this.context.player, {
          author: info.artist.name,
          description: info.title,
          duration: typeof info.duration === "number" ? import_discord_player7.Util.buildTimeCode(import_discord_player7.Util.parseMS(info.duration)) : info.duration,
          thumbnail: info.thumbnail,
          title: info.title,
          url: info.url,
          views: 0,
          source: "apple_music",
          requestedBy: context.requestedBy,
          queryType: context.type,
          metadata: {
            source: info,
            bridge: null
          },
          requestMetadata: async () => {
            return {
              source: info,
              bridge: await pullYTMetadata(this, track)
            };
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return { playlist: null, tracks: [] };
    }
  }
  async stream(info) {
    if (!this._stream) {
      throw new Error(`Could not initialize streaming api for '${this.constructor.name}'`);
    }
    let url = info.url;
    if (this._isYtdl) {
      if (YoutubeExtractor.validateURL(info.raw.url))
        url = info.raw.url;
      else {
        const meta = await pullYTMetadata(this, info);
        if (meta)
          info.setMetadata({
            ...info.metadata || {},
            bridge: meta
          });
        const _url = meta?.url;
        if (!_url)
          throw new Error("Failed to fetch resources for ytdl streaming");
        info.raw.url = url = _url;
      }
    }
    return this._stream(url);
  }
};
__name(AppleMusicExtractor, "AppleMusicExtractor");
AppleMusicExtractor.identifier = "com.discord-player.applemusicextractor";

// src/extractors/SpotifyExtractor.ts
var import_discord_player8 = require("discord-player");
var import_spotify_url_info = __toESM(require("spotify-url-info"));
var re = /^(?:https:\/\/open\.spotify\.com\/(intl-([a-z]|[A-Z]){0,3}\/)?(?:user\/[A-Za-z0-9]+\/)?|spotify:)(album|playlist|track)(?:[/:])([A-Za-z0-9]+).*$/;
var SpotifyExtractor = class extends import_discord_player8.BaseExtractor {
  constructor() {
    super(...arguments);
    this._isYtdl = false;
    this._credentials = {
      clientId: this.options.clientId || process.env.DP_SPOTIFY_CLIENT_ID || null,
      clientSecret: this.options.clientSecret || process.env.DP_SPOTIFY_CLIENT_SECRET || null
    };
    this.internal = new SpotifyAPI(this._credentials);
  }
  async activate() {
    const fn = this.options.createStream;
    if (typeof fn === "function") {
      this._isYtdl = false;
      this._stream = (q) => {
        return fn(this, q);
      };
      return;
    }
    const lib = await loadYtdl(this.context.player.options.ytdlOptions);
    this._stream = lib.stream;
    this._lib = (0, import_spotify_url_info.default)(getFetch);
    this._isYtdl = true;
    if (this.internal.isTokenExpired())
      await this.internal.requestToken();
  }
  async validate(query, type) {
    return [
      import_discord_player8.QueryType.SPOTIFY_ALBUM,
      import_discord_player8.QueryType.SPOTIFY_PLAYLIST,
      import_discord_player8.QueryType.SPOTIFY_SONG,
      import_discord_player8.QueryType.SPOTIFY_SEARCH,
      import_discord_player8.QueryType.AUTO,
      import_discord_player8.QueryType.AUTO_SEARCH
    ].some((t) => t === type);
  }
  async getRelatedTracks(track) {
    return await this.handle(track.author || track.title, {
      type: import_discord_player8.QueryType.SPOTIFY_SEARCH,
      requestedBy: track.requestedBy
    });
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player8.QueryType.AUTO:
      case import_discord_player8.QueryType.AUTO_SEARCH:
      case import_discord_player8.QueryType.SPOTIFY_SEARCH: {
        const data = await this.internal.search(query);
        if (!data)
          return this.createResponse();
        return this.createResponse(
          null,
          data.map((spotifyData) => {
            const track = new import_discord_player8.Track(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(spotifyData.duration ?? 0)),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: import_discord_player8.QueryType.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: spotifyData,
                  bridge: await pullYTMetadata(this, track)
                };
              }
            });
            track.extractor = this;
            return track;
          })
        );
      }
      case import_discord_player8.QueryType.SPOTIFY_SONG: {
        const spotifyData = await this._lib.getData(query, context.requestOptions).catch(import_discord_player8.Util.noop);
        if (!spotifyData)
          return { playlist: null, tracks: [] };
        const spotifyTrack = new import_discord_player8.Track(this.context.player, {
          title: spotifyData.title,
          description: `${spotifyData.name} by ${spotifyData.artists.map((m) => m.name).join(", ")}`,
          author: spotifyData.artists[0]?.name ?? "Unknown Artist",
          url: spotifyData.id ? `https://open.spotify.com/track/${spotifyData.id}` : query,
          thumbnail: spotifyData.coverArt?.sources?.[0]?.url || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
          duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(spotifyData.duration ?? spotifyData.maxDuration ?? 0)),
          views: 0,
          requestedBy: context.requestedBy,
          source: "spotify",
          queryType: context.type,
          metadata: {
            source: spotifyData,
            bridge: null
          },
          requestMetadata: async () => {
            return {
              source: spotifyData,
              bridge: await pullYTMetadata(this, spotifyTrack)
            };
          }
        });
        spotifyTrack.extractor = this;
        return { playlist: null, tracks: [spotifyTrack] };
      }
      case import_discord_player8.QueryType.SPOTIFY_PLAYLIST: {
        try {
          const { queryType, id } = this.parse(query);
          if (queryType !== "playlist")
            throw "err";
          const spotifyPlaylist = await this.internal.getPlaylist(id);
          if (!spotifyPlaylist)
            throw "err";
          const playlist = new import_discord_player8.Playlist(this.context.player, {
            title: spotifyPlaylist.name,
            description: spotifyPlaylist.name ?? "",
            thumbnail: spotifyPlaylist.thumbnail ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: "playlist",
            source: "spotify",
            author: {
              name: spotifyPlaylist.author ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyPlaylist.id,
            url: spotifyPlaylist.url || query,
            rawPlaylist: spotifyPlaylist
          });
          playlist.tracks = spotifyPlaylist.tracks.map((spotifyData) => {
            const data = new import_discord_player8.Track(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(spotifyData.duration ?? 0)),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: import_discord_player8.QueryType.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: spotifyData,
                  bridge: await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        } catch {
          const spotifyPlaylist = await this._lib.getData(query, context.requestOptions).catch(import_discord_player8.Util.noop);
          if (!spotifyPlaylist)
            return { playlist: null, tracks: [] };
          const playlist = new import_discord_player8.Playlist(this.context.player, {
            title: spotifyPlaylist.name ?? spotifyPlaylist.title,
            description: spotifyPlaylist.title ?? "",
            thumbnail: spotifyPlaylist.coverArt?.sources?.[0]?.url ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: spotifyPlaylist.type,
            source: "spotify",
            author: {
              name: spotifyPlaylist.subtitle ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyPlaylist.id,
            url: spotifyPlaylist.id ? `https://open.spotify.com/playlist/${spotifyPlaylist.id}` : query,
            rawPlaylist: spotifyPlaylist
          });
          playlist.tracks = spotifyPlaylist.trackList.map((m) => {
            const data = new import_discord_player8.Track(this.context.player, {
              title: m.title ?? "",
              description: m.title ?? "",
              author: m.subtitle ?? "Unknown Artist",
              url: m.uid ? `https://open.spotify.com/tracks/${m.uid}` : query,
              thumbnail: "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(m.duration)),
              views: 0,
              requestedBy: context.requestedBy,
              playlist,
              source: "spotify",
              queryType: "spotifySong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        }
      }
      case import_discord_player8.QueryType.SPOTIFY_ALBUM: {
        try {
          const { queryType, id } = this.parse(query);
          if (queryType !== "album")
            throw "err";
          const spotifyAlbum = await this.internal.getAlbum(id);
          if (!spotifyAlbum)
            throw "err";
          const playlist = new import_discord_player8.Playlist(this.context.player, {
            title: spotifyAlbum.name,
            description: spotifyAlbum.name ?? "",
            thumbnail: spotifyAlbum.thumbnail ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: "album",
            source: "spotify",
            author: {
              name: spotifyAlbum.author ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyAlbum.id,
            url: spotifyAlbum.url || query,
            rawPlaylist: spotifyAlbum
          });
          playlist.tracks = spotifyAlbum.tracks.map((spotifyData) => {
            const data = new import_discord_player8.Track(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(spotifyData.duration ?? 0)),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: import_discord_player8.QueryType.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: spotifyData,
                  bridge: await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        } catch {
          const album = await this._lib.getData(query, context.requestOptions).catch(import_discord_player8.Util.noop);
          if (!album)
            return { playlist: null, tracks: [] };
          const playlist = new import_discord_player8.Playlist(this.context.player, {
            title: album.name ?? album.title,
            description: album.title ?? "",
            thumbnail: album.coverArt?.sources?.[0]?.url ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: album.type,
            source: "spotify",
            author: {
              name: album.subtitle ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: album.id,
            url: album.id ? `https://open.spotify.com/playlist/${album.id}` : query,
            rawPlaylist: album
          });
          playlist.tracks = album.trackList.map((m) => {
            const data = new import_discord_player8.Track(this.context.player, {
              title: m.title ?? "",
              description: m.title ?? "",
              author: m.subtitle ?? "Unknown Artist",
              url: m.uid ? `https://open.spotify.com/tracks/${m.uid}` : query,
              thumbnail: "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(m.duration)),
              views: 0,
              requestedBy: context.requestedBy,
              playlist,
              source: "spotify",
              queryType: "spotifySong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        }
      }
      default:
        return { playlist: null, tracks: [] };
    }
  }
  async stream(info) {
    if (!this._stream) {
      throw new Error(`Could not initialize streaming api for '${this.constructor.name}'`);
    }
    let url = info.url;
    if (this._isYtdl) {
      if (YoutubeExtractor.validateURL(info.raw.url))
        url = info.raw.url;
      else {
        const meta = await pullYTMetadata(this, info);
        if (meta)
          info.setMetadata({
            ...info.metadata || {},
            bridge: meta
          });
        const _url = meta?.url;
        if (!_url)
          throw new Error("Failed to fetch resources for ytdl streaming");
        info.raw.url = url = _url;
      }
    }
    return this._stream(url);
  }
  parse(q) {
    const [, , , queryType, id] = re.exec(q) || [];
    return { queryType, id };
  }
};
__name(SpotifyExtractor, "SpotifyExtractor");
SpotifyExtractor.identifier = "com.discord-player.spotifyextractor";

// src/index.ts
var version = "4.3.1";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AppleMusicExtractor,
  AttachmentExtractor,
  Internal,
  ReverbnationExtractor,
  SoundCloudExtractor,
  SpotifyExtractor,
  UA,
  VimeoExtractor,
  YouTubeExtractor,
  YouTubeLibs,
  YoutubeExtractor,
  createImport,
  getFetch,
  loadYtdl,
  lyricsExtractor,
  makeYTSearch,
  pullYTMetadata,
  version
});
//# sourceMappingURL=data:application/json;base64,